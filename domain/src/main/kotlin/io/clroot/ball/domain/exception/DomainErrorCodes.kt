package io.clroot.ball.domain.exception

/**
 * 도메인 계층에서 사용하는 표준 에러 코드
 *
 * 어댑터 계층이나 클라이언트와의 계약을 명확히 하기 위해
 * 가능한 한 재사용 가능한 상수로 정의한다.
 */
object DomainErrorCodes {
    // 공통
    const val DOMAIN_ERROR = "DOMAIN_ERROR"
    const val BAD_INPUT = "VALIDATION_FAILED"
    const val UNAUTHORIZED = "UNAUTHORIZED"
    const val FORBIDDEN = "FORBIDDEN"
    const val NOT_FOUND = "NOT_FOUND"
    const val CONFLICT = "DUPLICATE_ENTITY"
    const val UNPROCESSABLE = "BUSINESS_RULE_VIOLATION"
    const val PRECONDITION_FAILED = "PRECONDITION_FAILED"
    const val RESOURCE_GONE = "RESOURCE_GONE"
    const val EXTERNAL_SYSTEM_ERROR = "EXTERNAL_SYSTEM_ERROR"
    const val EXTERNAL_SYSTEM_TIMEOUT = "EXTERNAL_TIMEOUT"

    // 비즈니스 규칙 위반
    const val BUSINESS_RULE_DUPLICATE = "BUSINESS_RULE_DUPLICATE"
    const val BUSINESS_RULE_ALREADY_DONE = "BUSINESS_RULE_ALREADY_DONE"
    const val BUSINESS_RULE_TIME_CONSTRAINT = "BUSINESS_RULE_TIME_CONSTRAINT"
    const val BUSINESS_RULE_PRECONDITION = "BUSINESS_RULE_PRECONDITION"
    const val BUSINESS_RULE_UNAVAILABLE = "BUSINESS_RULE_UNAVAILABLE"
    const val BUSINESS_RULE_CONFLICT = "BUSINESS_RULE_CONFLICT"
    const val BUSINESS_RULE_CANNOT = "BUSINESS_RULE_CANNOT"
    const val BUSINESS_RULE_INACTIVE = "BUSINESS_RULE_INACTIVE"

    // 도메인 상태 오류
    const val DOMAIN_STATE_ERROR = "DOMAIN_STATE_ERROR"
    const val DOMAIN_STATE_NOT_FOUND = "DOMAIN_STATE_NOT_FOUND"
    const val DOMAIN_STATE_EXISTS = "DOMAIN_STATE_ALREADY_EXISTS"
    const val DOMAIN_STATE_INVALID_TRANSITION = "DOMAIN_STATE_INVALID_TRANSITION"
    const val DOMAIN_STATE_REQUIRE_STATE = "DOMAIN_STATE_REQUIRE_STATE"
    const val DOMAIN_STATE_ALREADY_STATE = "DOMAIN_STATE_ALREADY_IN_STATE"

    // 외부 시스템
    const val EXTERNAL_SYSTEM_UNAVAILABLE = "EXTERNAL_SYSTEM_UNAVAILABLE"

    // 영속성
    const val PERSISTENCE_ERROR = "DATABASE_ERROR"
    const val PERSISTENCE_DUPLICATE = "DUPLICATE_ENTITY"
    const val PERSISTENCE_NOT_FOUND = "NOT_FOUND"
    const val PERSISTENCE_DATABASE_ERROR = "DATABASE_ERROR"
}
